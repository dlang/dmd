# Github action to test for C++ interoperability
#
# Most tests in the test-suite run on the CI when it comes to cross-platform testing.
# However, the dlang auto-tester uses somewhat old host C/C++ compiler.
# This is good for testing compatibility with e.g. LTS distributions,
# but becomes problematic when we want to test more cutting-edge features,
# such as newer C++ standards (C++17, C++20, etc...).
#
# This is the reason why we have this action: we have full control over the toolchain,
# and it is cross platform. The supported platforms are whatever Github Actions support,
# which is usually whatever the vendor (Canonical, Apple, Microsoft) supports.
#
# Notes:
# - Some patterns used here have been developed through a lot of trial and error
#   In particular, the build matrix approach, with two rows, and a large list of
#   excludes, ended up being the most useful approach.
# - Additionally, the check for the compiler version will save you a lot of trouble.
#   Having the wrong path added to the $PATH and ending up with the wrong compiler
#   being used can make debugging very painful.
# - Try to use the native Github action syntax (${{ expression }}) when possible,
#   as they are substituted with their value in the logs, unlike env variable.
#   For example use `${{ github.workspace }}` over `${GITHUB_WORKSPACE}`
#
# TODO:
# - Implement Windows + MSVC support
# - Implement Windows + clang support
name: C++ interop tests

# Only triggers on pushes to master & stable, as well as PR to master and stable
# Sometimes reverts appear in the upstream repository (e.g. when the revert button
# is clicked by a contributor with commit access), this should be tested as PR).
#
# Also note that Github actions does not retrigger on target branch changes,
# hence the check on push.
on:
  pull_request:
    branches:
      - master
      - stable
  push:
    branches:
      - master
      - stable
      # Use this branch name in your fork to test changes
      - github-actions

jobs:
  main:
    name: Run
    if: github.repository == 'dlang/dmd'

    strategy:
      # Since those tests takes very little time, don't use `fail-fast`.
      # If runtime expand, we might want to comment this out,
      # as most failing PRs do so because they don't compile / something is broken,
      # very few PRs actually benefit from this.
      fail-fast: false
      matrix:
        include:
          # Linux, clang:
          - { os: ubuntu-24.04, compiler: clang-18 }
          - { os: ubuntu-24.04, compiler: clang-17 }
          - { os: ubuntu-24.04, compiler: clang-16 }
          - { os: ubuntu-24.04, compiler: clang-15 }
          - { os: ubuntu-24.04, compiler: clang-14 }
          # Linux, g++:
          - { os: ubuntu-24.04, compiler: g++-13 }
          - { os: ubuntu-24.04, compiler: g++-12 }
          - { os: ubuntu-24.04, compiler: g++-11 }
          - { os: ubuntu-24.04, compiler: g++-10 }
          - { os: ubuntu-24.04, compiler: g++-9 }
          # macOS, Apple clang from Xcode:
          - { os: macos-13, xcode: '14.3.1' }
          - { os: macos-13, xcode: '15.2' }
          - { os: macos-14, xcode: '16.2' }
          # Windows, cl.exe from Visual Studio:
          - { os: windows-2022 }
          - { os: windows-2019 }

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    steps:

    - name: Set environment variable N (parallelism)
      run: echo "N=$(${{ runner.os == 'macOS' && 'sysctl -n hw.logicalcpu' || 'nproc' }})" >> $GITHUB_ENV

    - name: 'macOS: Upgrade GNU make'
      if: runner.os == 'macOS'
      run: |
        set -eux
        brew install make
        sudo ln -s $(which gmake) /usr/local/bin/make
        make --version

    ########################################
    #    Setting up the host D compiler    #
    ########################################
    - name: Prepare compiler
      uses: dlang-community/setup-dlang@v2
    - name: 'Posix: Clear LD_LIBRARY_PATH environment variable' # don't use host druntime/Phobos .so/.dylib etc.
      if: runner.os != 'Windows'
      run: echo "LD_LIBRARY_PATH=" >> $GITHUB_ENV

    ##############################################
    # Find out which branch we need to check out #
    ##############################################
    - name: Determine base branch
      id: base_branch
      run: |
        # For pull requests, base_ref will not be empty
        if [ ! -z ${{ github.base_ref }} ]; then
            echo "branch=${{ github.base_ref }}" >> $GITHUB_OUTPUT
        # Otherwise, use whatever ref we have:
        # For branches this in the format 'refs/heads/<branch_name>',
        # and for tags it is refs/tags/<tag_name>.
        else
            echo "branch=${{ github.ref }}" >> $GITHUB_OUTPUT
        fi

    #####################################
    #    Checking out DMD and Phobos    #
    #####################################
    - name: Checkout DMD
      uses: actions/checkout@v4
      with:
        path: dmd
        persist-credentials: false
    - name: Checkout Phobos
      uses: actions/checkout@v4
      with:
        path: phobos
        repository: dlang/phobos
        ref: ${{ steps.base_branch.outputs.branch }}
        persist-credentials: false


    ########################################
    #   Setting up the host C++ compiler   #
    ########################################
    - name: 'Linux: Install C++ compiler'
      if: runner.os == 'Linux'
      run: |
        set -eux
        sudo apt-get update
        apt_packages='${{ matrix.compiler }}'
        # add 32-bit package for 32-bit tests
        if [[ '${{ matrix.compiler }}' =~ ^g\+\+ ]]; then
          apt_packages+=" ${{ matrix.compiler }}-multilib"
        else
          apt_packages+=" g++-multilib"
        fi
        sudo apt-get install -y $apt_packages

    - name: 'Windows: Set up MSVC environment' # puts cl.exe in PATH etc.
      if: runner.os == 'Windows'
      uses: seanmiddleditch/gha-setup-vsdevenv@v4
      with:
        arch: x64

    - name: 'Posix: Setup CC and CXX environment variables'
      if: runner.os != 'Windows'
      run: |
        if [[ '${{ runner.os }}' == Linux ]]; then
          compiler='${{ matrix.compiler }}'
          echo "CC=${compiler/g++/gcc}" >> $GITHUB_ENV
          echo "CXX=${compiler/clang/clang++}" >> $GITHUB_ENV
        elif [[ '${{ runner.os }}' == macOS ]]; then
          sudo xcode-select -switch /Applications/Xcode_${{ matrix.xcode }}.app
          echo "CC=cc" >> $GITHUB_ENV
          echo "CXX=c++" >> $GITHUB_ENV
        fi

    - name: Verify used C/C++ compiler versions
      run: |
        set -eux
        if [[ '${{ runner.os }}' == Windows ]]; then
          which cl.exe
        else
          $CC --version
          $CXX --version
        fi

    ########################################
    #    Building DMD, druntime, Phobos    #
    ########################################
    - name: Build compiler & standard library
      run: |
        set -eux
        # All hosts are 64 bits but let's be explicit
        if [[ '${{ matrix.os }}' == macos-14 ]]; then
          # don't try compiling a native arm64 DMD on macOS (doesn't work)
          make -C dmd  -j$N dmd MODEL=64 DFLAGS="-mtriple=x86_64-apple-macos14"
        fi
        make -C dmd    -j$N MODEL=64
        make -C phobos -j$N MODEL=64

    - name: Build compiler & standard library (32-bit)
      if: runner.os == 'Linux'
      run: |
        set -eux
        make -C dmd    -j$N MODEL=32
        make -C phobos -j$N MODEL=32

    ########################################
    #        Running the test suite        #
    ########################################
    - name: Run compiler C++ test suite
      run: ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=64 ${{ matrix.os == 'macos-14' && 'HOST_DMD="$PWD/dmd/generated/osx/release/64/dmd"' || '' }}
    - name: Run compiler C++ test suite (32-bit)
      if: runner.os == 'Linux'
      run: |
        set -eux
        ./dmd/compiler/test/run.d clean
        ./dmd/compiler/test/run.d --environment runnable_cxx dshell/dll_cxx.d MODEL=32

    - name: Run druntime C++ tests
      run: make -C dmd/druntime -j$N test/stdcpp/.run MODEL=64
    - name: Run druntime C++ tests (32-bit)
      if: runner.os == 'Linux'
      run: make -C dmd/druntime -j$N test/stdcpp/.run MODEL=32

    - name: 'Posix: Run frontend C++ unittests'
      if: runner.os != 'Windows' # not supported by build.d yet
      run: |
        set -eux
        if [[ '${{ matrix.os }}' == macos-14 ]]; then
          # switch from LDC to freshly built DMD as host compiler
          export HOST_DMD="$PWD/dmd/generated/osx/release/64/dmd"
          export CXXFLAGS="-arch x86_64"
          rm ./dmd/generated/osx/release/64/*.o
        fi
        ./dmd/generated/build cxx-unittest MODEL=64
    - name: Run frontend C++ unittests (32-bit)
      if: runner.os == 'Linux'
      run: ./dmd/generated/build cxx-unittest MODEL=32

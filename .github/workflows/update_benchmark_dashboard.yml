name: Update Benchmark Dashboard
on:
  workflow_run:
    workflows: ["Performance Regression Check"]
    types:
      - completed
    branches:
      - master
jobs:
  update-dashboard:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code with dashboard.html
        uses: actions/checkout@v4
        with:
          ref: master
          path: source-repo

      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages-repo
          # Add fetch-depth to avoid shallow clone issues
          fetch-depth: 0

      - name: Download benchmark artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: performance_regression.yml
          workflow_conclusion: success
          name: benchmark_data
          path: benchmark_data
          if_no_artifact_found: warn

      - name: Update benchmark history
        run: |
          # Create directories if they don't exist
          mkdir -p gh-pages-repo/benchmark_data gh-pages-repo/assets

          # Copy benchmark data to gh-pages repo
          if [ -d "benchmark_data" ] && [ "$(ls -A benchmark_data)" ]; then
            cp -r benchmark_data/* gh-pages-repo/benchmark_data/
          else
            echo "No new benchmark data found, but continuing."
          fi

          # Process benchmark data
          cd gh-pages-repo

          # Create history.json if it doesn't exist
          if [ ! -f benchmark_data/history.json ]; then
            echo "[]" > benchmark_data/history.json
          fi

          # Process any new PR files
          for file in benchmark_data/pr_*.json; do
            if [ -f "$file" ]; then
              # Check if this is valid JSON
              if jq empty "$file" 2>/dev/null; then
                # Add each new result to the array
                jq -s '.[0] + [.[1]]' benchmark_data/history.json "$file" > benchmark_data/new_history.json
                mv benchmark_data/new_history.json benchmark_data/history.json
                # Remove the processed file to avoid duplication
                rm "$file"
              else
                echo "Invalid JSON in $file, skipping"
              fi
            fi
          done

          # Sort the array by timestamp
          jq 'sort_by(.timestamp)' benchmark_data/history.json > benchmark_data/sorted_history.json
          mv benchmark_data/sorted_history.json benchmark_data/history.json

          # Copy the latest dashboard HTML from the source repo
          cp ../source-repo/dashboard.html index.html

      - name: Commit and push changes
        run: |
          cd gh-pages-repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add benchmark_data index.html assets

          # Only commit if there are actual changes
          if git status --porcelain | grep .; then
            git commit -m "Update benchmark dashboard [skip ci]"
            # Use force push to avoid conflicts
            git push --force origin HEAD:gh-pages
          else
            echo "No changes to commit"
          fi

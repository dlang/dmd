name: PR Comment Bot

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up D programming language
        uses: dlang-community/setup-dlang@v1.3.0
        with:
          compiler: dmd-latest

      - name: Set up environment
        run: |
          echo "N=$(nproc)" >> $GITHUB_ENV
          echo "HOST_DMD=dmd" >> $GITHUB_ENV
          echo "MODEL=64" >> $GITHUB_ENV

      - name: Install dependencies
        run: sudo apt-get install -y build-essential

      - name: Build project
        run: |
          start_time=$(date +%s%3N)  # Get time in milliseconds
          /usr/bin/time -v make -j$N MODEL=$MODEL HOST_DMD=$HOST_DMD
          end_time=$(date +%s%3N)  # Get time in milliseconds
          runtime=$((end_time - start_time))
          echo "RUNTIME=$runtime" >> $GITHUB_ENV

      - name: Get RAM usage
        run: |
          ram_usage=$(free -m | awk '/Mem:/ {print $3}')
          echo "RAM_USAGE=$ram_usage" >> $GITHUB_ENV

      - name: Make build scripts executable
        run: |
          chmod +x ./ci/summary_comment.sh
          chmod +x ./ci/summary_comment_diff.sh

      - name: Generate build statistics
        run: |
          echo "### ✅ Build Statistics" > NEW_OUTPUT.txt
          echo "This build's statistics are calculated as follows:" >> NEW_OUTPUT.txt
          echo "- **Execution Time:** The total time taken to build the project. Value: \`$RUNTIME\` milliseconds (\`$(echo "$RUNTIME / 1000" | bc)\` seconds)." >> NEW_OUTPUT.txt
          echo "- **RAM Usage:** The amount of memory (in megabytes) used during the build. Value: \`$RAM_USAGE\` MB." >> NEW_OUTPUT.txt
          echo "" >> NEW_OUTPUT.txt
          ./ci/summary_comment.sh >> NEW_OUTPUT.txt || echo "No additional build stats provided."

      - name: Generate comment diff
        run: |
          old_runtime=0
          old_ram=0

          # Extract previous build statistics if available
          if [ -f OLD_OUTPUT.txt ]; then
            old_runtime=$(grep -oP '\d+(?= milliseconds)' OLD_OUTPUT.txt | head -1)
            old_ram=$(grep -oP '\d+(?= MB)' OLD_OUTPUT.txt | head -1)
          fi

          runtime_diff=$((RUNTIME - old_runtime))
          ram_diff=$((RAM_USAGE - old_ram))

          runtime_status="🔄 No change"
          ram_status="🔄 No change"

          if [ "$runtime_diff" -gt 0 ]; then
            runtime_status="⬆️ Increased by $runtime_diff ms"
          elif [ "$runtime_diff" -lt 0 ]; then
            runtime_status="⬇️ Decreased by ${runtime_diff#-} ms"
          fi

          if [ "$ram_diff" -gt 0 ]; then
            ram_status="⬆️ Increased by $ram_diff MB"
          elif [ "$ram_diff" -lt 0 ]; then
            ram_status="⬇️ Decreased by ${ram_diff#-} MB"
          fi

          echo "### 🔍 Build Statistics Diff" > comment.txt
          echo "Comparing previous build statistics with the current build:" >> comment.txt
          echo "- **Execution Time:** \`$RUNTIME\` ms (\`$(echo "$RUNTIME / 1000" | bc)\` seconds) — $runtime_status" >> comment.txt
          echo "- **RAM Usage:** \`$RAM_USAGE\` MB — $ram_status" >> comment.txt
          echo "" >> comment.txt
          echo "<details>" >> comment.txt
          echo "<summary>🔎 Click to expand detailed comparison</summary>" >> comment.txt
          echo "" >> comment.txt
          echo "| Metric | Previous | Current | Change |" >> comment.txt
          echo "|--------|----------|----------|--------|" >> comment.txt
          echo "| Execution Time | \`$old_runtime\` ms | \`$RUNTIME\` ms | $runtime_status |" >> comment.txt
          echo "| RAM Usage | \`$old_ram\` MB | \`$RAM_USAGE\` MB | $ram_status |" >> comment.txt
          echo "" >> comment.txt
          echo "</details>" >> comment.txt

      - name: "Debug: Check comment.txt contents"
        run: cat comment.txt || echo "comment.txt is empty"

      - name: Post Comment on PR
        uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = 'comment.txt';

            if (!fs.existsSync(path) || fs.statSync(path).size === 0) {
              console.log("No comment generated, skipping PR comment.");
              return;
            }

            const comment = fs.readFileSync(path, 'utf8').trim();
            if (!comment) {
              console.log("Comment is empty, skipping PR comment.");
              return;
            }

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

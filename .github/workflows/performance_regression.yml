name: Performance Regression Check
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      pull-requests: write
    env:
      MODEL: 64
      BENCHMARK_REPO: https://github.com/dlang/phobos
      BENCHMARK_REF: master

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        path: pr-dmd

    - name: Checkout master code
      uses: actions/checkout@v4
      with:
        repository: dlang/dmd
        ref: master
        path: master-dmd

    - name: Setup D compiler
      uses: dlang-community/setup-dlang@v1.3.0
      with:
        compiler: dmd-latest

    - name: Build PR compiler
      working-directory: ./pr-dmd
      run: |
        make -j$(nproc) MODEL=$MODEL HOST_DMD=$DC
        mkdir -p generated/linux/release/$MODEL

    - name: Build master compiler
      working-directory: ./master-dmd
      run: |
        make -j$(nproc) MODEL=$MODEL HOST_DMD=$DC
        mkdir -p generated/linux/release/$MODEL

    - name: Compare compiler binaries
      id: diff_check
      run: |
        pr_compiler="./pr-dmd/generated/linux/release/$MODEL/dmd"
        master_compiler="./master-dmd/generated/linux/release/$MODEL/dmd"

        pr_md5=$(md5sum "$pr_compiler" | cut -d' ' -f1)
        master_md5=$(md5sum "$master_compiler" | cut -d' ' -f1)

        if diff -q "$pr_compiler" "$master_compiler" >/dev/null; then
          echo "DIFF_RESULT=✅ Binaries are identical (MD5: ${pr_md5:0:8})" >> $GITHUB_OUTPUT
        else
          echo "DIFF_RESULT=❌ Binaries differ (PR MD5: ${pr_md5:0:8}, Master MD5: ${master_md5:0:8})" >> $GITHUB_OUTPUT
        fi

    - name: Checkout benchmark project
      uses: actions/checkout@v4
      with:
        repository: dlang/phobos
        ref: ${{ env.BENCHMARK_REF }}
        path: benchmark-phobos

    - name: Install hyperfine
      run: sudo apt-get install -y hyperfine jq

    - name: Warmup build cache
      working-directory: ./benchmark-phobos
      run: |
        ../pr-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d || true
        rm -f *.o

    - name: Run benchmarks
      working-directory: ./benchmark-phobos
      run: |
        hyperfine \
          --warmup 1 \
          --runs 5 \
          --show-output \
          --export-json benchmark_results.json \
          --prepare 'rm -f *.o' \
          "../pr-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d" \
          "../master-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d"

    - name: Parse results
      id: results
      run: |
        if [ ! -f benchmark-phobos/benchmark_results.json ]; then
          echo "::error::Benchmark results file not found!"
          exit 1
        fi

        # Validate JSON structure
        if ! jq -e '.results | length >= 2' benchmark-phobos/benchmark_results.json >/dev/null; then
          echo "::error::Invalid benchmark results format"
          exit 1
        fi

        # Extract raw data with error handling
        pr_times=($(jq -r '.results[0].times[]? | select(. != null) | tonumber' benchmark-phobos/benchmark_results.json || true))
        pr_mem=($(jq -r '.results[0].max_rss[]? | select(. != null) | tonumber' benchmark-phobos/benchmark_results.json || true))
        master_times=($(jq -r '.results[1].times[]? | select(. != null) | tonumber' benchmark-phobos/benchmark_results.json || true))
        master_mem=($(jq -r '.results[1].max_rss[]? | select(. != null) | tonumber' benchmark-phobos/benchmark_results.json || true))

        if [ ${#pr_times[@]} -eq 0 ] || [ ${#master_times[@]} -eq 0 ]; then
          echo "::error::Missing time measurements in benchmark results"
          exit 1
        fi

        # Format individual runs
        pr_time_runs=$(printf "%.3f, " "${pr_times[@]}" | sed 's/, $//')
        pr_mem_runs=$(for m in "${pr_mem[@]}"; do printf "%.1f MB, " "$(echo "$m/1024" | bc -l)"; done | sed 's/, $//')
        master_time_runs=$(printf "%.3f, " "${master_times[@]}" | sed 's/, $//')
        master_mem_runs=$(for m in "${master_mem[@]}"; do printf "%.1f MB, " "$(echo "$m/1024" | bc -l)"; done | sed 's/, $//')

        # Calculate averages and stats
        pr_time_avg=$(jq -r '.results[0].mean' benchmark-phobos/benchmark_results.json | awk '{printf "%.3f", $1}')
        pr_time_stddev=$(jq -r '.results[0].stddev' benchmark-phobos/benchmark_results.json | awk '{printf "%.3f", $1}')
        master_time_avg=$(jq -r '.results[1].mean' benchmark-phobos/benchmark_results.json | awk '{printf "%.3f", $1}')
        master_time_stddev=$(jq -r '.results[1].stddev' benchmark-phobos/benchmark_results.json | awk '{printf "%.3f", $1}')

        pr_mem_avg=$(echo "${pr_mem[@]}" | tr ' ' '\n' | awk '{sum += $1} END {printf "%.1f", sum/NR/1024}')
        master_mem_avg=$(echo "${master_mem[@]}" | tr ' ' '\n' | awk '{sum += $1} END {printf "%.1f", sum/NR/1024}')
        time_diff=$(awk -v pt="$pr_time_avg" -v mt="$master_time_avg" 'BEGIN {printf "%.3f", pt - mt}')
        time_pct=$(awk -v pt="$pr_time_avg" -v mt="$master_time_avg" 'BEGIN {printf "%+.2f%%", ((pt/mt)-1)*100}')
        mem_diff=$(awk -v pm="$pr_mem_avg" -v mm="$master_mem_avg" 'BEGIN {printf "%+.1f", pm - mm}')
        mem_pct=$(awk -v pm="$pr_mem_avg" -v mm="$master_mem_avg" 'BEGIN {printf "%+.2f%%", ((pm/mm)-1)*100}')

        # Set outputs
        echo "pr_time_runs=${pr_time_runs}" >> $GITHUB_OUTPUT
        echo "pr_mem_runs=${pr_mem_runs}" >> $GITHUB_OUTPUT
        echo "master_time_runs=${master_time_runs}" >> $GITHUB_OUTPUT
        echo "master_mem_runs=${master_mem_runs}" >> $GITHUB_OUTPUT
        echo "pr_time_avg=${pr_time_avg} ± ${pr_time_stddev}" >> $GITHUB_OUTPUT
        echo "master_time_avg=${master_time_avg} ± ${master_time_stddev}" >> $GITHUB_OUTPUT
        echo "pr_mem_avg=${pr_mem_avg}" >> $GITHUB_OUTPUT
        echo "master_mem_avg=${master_mem_avg}" >> $GITHUB_OUTPUT
        echo "time_diff=${time_diff}" >> $GITHUB_OUTPUT
        echo "time_pct=${time_pct}" >> $GITHUB_OUTPUT
        echo "mem_diff=${mem_diff}" >> $GITHUB_OUTPUT
        echo "mem_pct=${mem_pct}" >> $GITHUB_OUTPUT
        echo "binary_diff=${{ steps.diff_check.outputs.DIFF_RESULT }}" >> $GITHUB_OUTPUT

    - name: Create comment
      run: |
        PERFORMANCE_COMMENT=$(cat << EOF
        ### 🚀 Performance Benchmark Results

        **Individual Runs:**
        | Run | PR Time (s) | Master Time (s) | PR Memory (MB) | Master Memory (MB) |
        |-----|-------------|-----------------|----------------|---------------------|
        $(
          IFS=', ' read -ra pr_times <<< "${{ steps.results.outputs.pr_time_runs }}"
          IFS=', ' read -ra master_times <<< "${{ steps.results.outputs.master_time_runs }}"
          IFS=', ' read -ra pr_mems <<< "${{ steps.results.outputs.pr_mem_runs }}"
          IFS=', ' read -ra master_mems <<< "${{ steps.results.outputs.master_mem_runs }}"
          for i in {0..4}; do
            printf "| %d | ${pr_times[$i]:-N/A} | ${master_times[$i]:-N/A} | ${pr_mems[$i]:-N/A} | ${master_mems[$i]:-N/A} |\\n" $((i+1))
          done
        )

        **Summary Statistics:**
        | Metric          | PR                    | Master                 | Difference       | Change          |
        |-----------------|-----------------------|------------------------|------------------|-----------------|
        | ⏱️ Time (s)     | ${{ steps.results.outputs.pr_time_avg }} | ${{ steps.results.outputs.master_time_avg }} | ${{ steps.results.outputs.time_diff }} | ${{ steps.results.outputs.time_pct }} |
        | 🧠 Memory (MB)  | ${{ steps.results.outputs.pr_mem_avg }}      | ${{ steps.results.outputs.master_mem_avg }}      | ${{ steps.results.outputs.mem_diff }}  | ${{ steps.results.outputs.mem_pct }}  |

        **Binary Comparison:**
        ${{ steps.results.outputs.binary_diff }}

        <details>
        <summary>📊 Additional Details</summary>

        - **Benchmark target**: Phobos@${{ env.BENCHMARK_REF }}
        - **Runs**: 5 measurements after 1 warmup
        - **Environment**: Ubuntu Latest (GitHub Actions)
        - **Hyperfine version**: \`$(hyperfine --version)\`
        - **Execution date**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
        - **Compiler model**: ${{ env.MODEL }}-bit
        </details>
        EOF
        )
        echo "$PERFORMANCE_COMMENT" > performance_comment.md

    - name: Post comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          try {
            const comment = fs.readFileSync('performance_comment.md', 'utf8');
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(c => c.body.includes('🚀 Performance Benchmark Results'));

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment,
              });
            }
          } catch (error) {
            core.error('Failed to post comment: ' + error.message);
          }

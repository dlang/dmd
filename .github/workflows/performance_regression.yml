name: Performance Regression Check
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      MODEL: 64
      BENCHMARK_REPO: https://github.com/dlang/phobos
      BENCHMARK_REF: master

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        path: pr-dmd

    - name: Checkout master code
      uses: actions/checkout@v4
      with:
        repository: dlang/dmd
        ref: master
        path: master-dmd

    - name: Setup D compiler
      uses: dlang-community/setup-dlang@v1.3.0
      with:
        compiler: dmd-latest

    - name: Build PR compiler
      working-directory: ./pr-dmd
      run: |
        make -j$(nproc) MODEL=$MODEL HOST_DMD=$DC
        mkdir -p generated/linux/release/$MODEL

    - name: Build master compiler
      working-directory: ./master-dmd
      run: |
        make -j$(nproc) MODEL=$MODEL HOST_DMD=$DC
        mkdir -p generated/linux/release/$MODEL

    - name: Compare compiler binaries
      id: diff_check
      run: |
        pr_compiler="./pr-dmd/generated/linux/release/$MODEL/dmd"
        master_compiler="./master-dmd/generated/linux/release/$MODEL/dmd"

        if diff -q "$pr_compiler" "$master_compiler" >/dev/null; then
          echo "DIFF_RESULT=Binaries are identical" >> $GITHUB_OUTPUT
        else
          echo "DIFF_RESULT=Binaries differ" >> $GITHUB_OUTPUT
          diff -u "$pr_compiler" "$master_compiler" || true
        fi

    - name: Checkout benchmark project
      uses: actions/checkout@v4
      with:
        repository: dlang/phobos
        ref: ${{ env.BENCHMARK_REF }}
        path: benchmark-phobos

    - name: Install hyperfine
      run: sudo apt-get install -y hyperfine jq

    - name: Warmup build cache
      working-directory: ./benchmark-phobos
      run: |
        ../pr-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d || true
        rm -f *.o

    - name: Run benchmarks
      working-directory: ./benchmark-phobos
      run: |
        hyperfine \
          --warmup 1 \
          --runs 5 \
          --show-output \
          --export-json benchmark_results.json \
          --prepare 'rm -f *.o' \
          "../pr-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d" \
          "../master-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d"

    - name: Parse results
      id: results
      run: |
        # Check if benchmark file exists
        if [ ! -f benchmark-phobos/benchmark_results.json ]; then
          echo "Error: benchmark results file not found!"
          exit 1
        fi

        # Extract values with error handling
        pr_time=$(jq -r '.results[0].mean // empty' benchmark-phobos/benchmark_results.json)
        master_time=$(jq -r '.results[1].mean // empty' benchmark-phobos/benchmark_results.json)
        pr_time_var=$(jq -r '.results[0].stddev // 0' benchmark-phobos/benchmark_results.json)
        master_time_var=$(jq -r '.results[1].stddev // 0' benchmark-phobos/benchmark_results.json)
        pr_mem=$(jq -r '.results[0].max_rss // 0' benchmark-phobos/benchmark_results.json)
        master_mem=$(jq -r '.results[1].max_rss // 0' benchmark-phobos/benchmark_results.json)
        pr_mem_var=$(jq -r '.results[0].variance // 0' benchmark-phobos/benchmark_results.json)
        master_mem_var=$(jq -r '.results[1].variance // 0' benchmark-phobos/benchmark_results.json)

        # Debug output
        echo "Raw values:"
        echo "pr_time: $pr_time | master_time: $master_time"
        echo "pr_mem: $pr_mem | master_mem: $master_mem"
        echo "variances: time($pr_time_var, $master_time_var) mem($pr_mem_var, $master_mem_var)"

        # Calculation functions with error handling
        safe_calc() {
          awk -v a="$1" -v b="$2" '
            BEGIN {
              if (b == 0) {
                if (a == 0) print "NaN"
                else print "Inf"
                exit 0
              }
              printf "%.2f", a / b
            }'
        }

        safe_diff() {
          awk -v a="$1" -v b="$2" 'BEGIN {printf "%.2f", a - b}'
        }

        # Time calculations
        time_diff=$(safe_diff "$pr_time" "$master_time")
        time_pct=$(awk -v pt="$pr_time" -v mt="$master_time" '
          BEGIN {
            if (mt == 0) { print "NaN"; exit 0 }
            printf "%.2f", (pt/mt - 1) * 100
          }')
        time_sig=$(awk -v diff="$time_diff" -v var1="$pr_time_var" -v var2="$master_time_var" '
          BEGIN {
            denominator = sqrt(var1^2 + var2^2)
            if (denominator == 0) { print "NaN"; exit 0 }
            printf "%.2f", diff / denominator
          }')

        # Memory calculations
        pr_mem_mb=$(awk -v pm="$pr_mem" 'BEGIN {printf "%.2f", pm/1024}')
        master_mem_mb=$(awk -v mm="$master_mem" 'BEGIN {printf "%.2f", mm/1024}')
        mem_diff_mb=$(safe_diff "$pr_mem_mb" "$master_mem_mb")
        mem_pct=$(awk -v pm="$pr_mem" -v mm="$master_mem" '
          BEGIN {
            if (mm == 0) { print "NaN"; exit 0 }
            printf "%.2f", (pm/mm - 1) * 100
          }')
        mem_sig=$(awk -v diff="$pr_mem" -v var1="$pr_mem_var" -v var2="$master_mem_var" '
          BEGIN {
            denominator = sqrt(var1 + var2)
            if (denominator == 0) { print "NaN"; exit 0 }
            printf "%.2f", (diff) / denominator
          }')

        # Set outputs with NaN handling
        echo "pr_time=${pr_time:-NaN}" >> $GITHUB_OUTPUT
        echo "master_time=${master_time:-NaN}" >> $GITHUB_OUTPUT
        echo "time_diff=${time_diff:-NaN}" >> $GITHUB_OUTPUT
        echo "time_pct=${time_pct:-NaN}" >> $GITHUB_OUTPUT
        echo "time_sig=${time_sig:-NaN}" >> $GITHUB_OUTPUT
        echo "pr_mem=${pr_mem_mb:-NaN}" >> $GITHUB_OUTPUT
        echo "master_mem=${master_mem_mb:-NaN}" >> $GITHUB_OUTPUT
        echo "mem_diff=${mem_diff_mb:-NaN}" >> $GITHUB_OUTPUT
        echo "mem_pct=${mem_pct:-NaN}" >> $GITHUB_OUTPUT
        echo "mem_sig=${mem_sig:-NaN}" >> $GITHUB_OUTPUT

    - name: Create comment
      run: |
        PERFORMANCE_COMMENT=$(cat << EOF
        ### ðŸš€ Performance Benchmark Results

        **Comparison between PR and master branch:**
        | Metric          | PR        | Master    | Difference | Change  | Variance | Ïƒ        |
        |-----------------|-----------|-----------|------------|---------|----------|----------|
        | Time (s)        | ${{ format('%.3f', steps.results.outputs.pr_time) }} | ${{ format('%.3f', steps.results.outputs.master_time) }} | ${{ format('%.3f', steps.results.outputs.time_diff) }} | ${{ format('%.2f', steps.results.outputs.time_pct) }}% | Â±${{ format('%.3f', steps.results.outputs.time_var) }} | Ïƒ=${{ format('%.2f', steps.results.outputs.time_sig) }} |
        | Memory (MB)     | ${{ format('%.2f', steps.results.outputs.pr_mem) }} | ${{ format('%.2f', steps.results.outputs.master_mem) }} | ${{ format('%.2f', steps.results.outputs.mem_diff) }} | ${{ format('%.2f', steps.results.outputs.mem_pct) }}% | Â±${{ format('%.0f', steps.results.outputs.mem_var) }} | Ïƒ=${{ format('%.2f', steps.results.outputs.mem_sig) }} |

        **Statistical Significance:**
        - Time: Ïƒ-score of ${{ format('%.2f', steps.results.outputs.time_sig) }} (|Ïƒ| > 2 is significant)
        - Memory: Ïƒ-score of ${{ format('%.2f', steps.results.outputs.mem_sig) }} (|Ïƒ| > 2 is significant)

        **Executable Comparison:**
        ${{ steps.diff_check.outputs.DIFF_RESULT }}

        **Details:**
        - Benchmark project: Phobos@${{ env.BENCHMARK_REF }}
        - 5 runs averaged using [hyperfine](https://github.com/sharkdp/hyperfine)
        - Clean build between runs
        - Variance calculated using pooled standard deviation
        EOF
        )
        echo "$PERFORMANCE_COMMENT" > performance_comment.md

    - name: Post comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('performance_comment.md', 'utf8');
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(c => c.body.includes('ðŸš€ Performance Benchmark Results'));

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }

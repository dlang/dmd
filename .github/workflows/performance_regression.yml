name: Performance Regression Check
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      pull-requests: write
    env:
      MODEL: 64
      BENCHMARK_REPO: https://github.com/dlang/phobos
      BENCHMARK_REF: master

    steps:
    - name: Checkout PR code
      uses: actions/checkout@v4
      with:
        path: pr-dmd

    - name: Checkout master code
      uses: actions/checkout@v4
      with:
        repository: dlang/dmd
        ref: master
        path: master-dmd

    - name: Setup D compiler
      uses: dlang-community/setup-dlang@v1.3.0
      with:
        compiler: dmd-latest

    - name: Build PR compiler
      working-directory: ./pr-dmd
      run: |
        make -j$(nproc) MODEL=$MODEL HOST_DMD=$DC
        mkdir -p generated/linux/release/$MODEL

    - name: Build master compiler
      working-directory: ./master-dmd
      run: |
        make -j$(nproc) MODEL=$MODEL HOST_DMD=$DC
        mkdir -p generated/linux/release/$MODEL

    - name: Compare compiler binaries
      id: diff_check
      run: |
        pr_compiler="./pr-dmd/generated/linux/release/$MODEL/dmd"
        master_compiler="./master-dmd/generated/linux/release/$MODEL/dmd"

        # Get checksums and sizes
        pr_md5=$(md5sum "$pr_compiler" | cut -d' ' -f1)
        master_md5=$(md5sum "$master_compiler" | cut -d' ' -f1)
        pr_size=$(stat -c%s "$pr_compiler")
        master_size=$(stat -c%s "$master_compiler")

        # Get human-readable version info
        pr_version=$("./pr-dmd/generated/linux/release/$MODEL/dmd" --version | head -1)
        master_version=$("./master-dmd/generated/linux/release/$MODEL/dmd" --version | head -1)

        # Get binary differences
        if diff -q "$pr_compiler" "$master_compiler" >/dev/null; then
          echo "DIFF_RESULT=✅ Binaries are identical (MD5: $pr_md5)" >> $GITHUB_OUTPUT
        else
          xxd "$pr_compiler" > pr_hex
          xxd "$master_compiler" > master_hex
          diff_output=$(diff -u pr_hex master_hex | head -50)

          # Use quoted heredoc to preserve formatting
          {
            echo "DIFF_DETAILS<<EOF"
            echo "**Binary Differences:**"
            echo "- PR Size: $pr_size bytes | Master Size: $master_size bytes"
            echo "- PR Version: $pr_version"
            echo "- Master Version: $master_version"
            echo '```diff'
            cat pr_hex | diff -u - master_hex | head -50
            echo '```'
            echo "EOF"
          } >> $GITHUB_OUTPUT

          echo "DIFF_RESULT=❌ Binaries differ (PR MD5: $pr_md5, Master MD5: $master_md5)" >> $GITHUB_OUTPUT
        fi

    - name: Checkout benchmark project
      uses: actions/checkout@v4
      with:
        repository: dlang/phobos
        ref: ${{ env.BENCHMARK_REF }}
        path: benchmark-phobos

    - name: Install hyperfine
      run: sudo apt-get install -y hyperfine jq bc

    - name: Warmup build cache
      working-directory: ./benchmark-phobos
      run: |
        ../pr-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d || true
        rm -f *.o

    - name: Run benchmarks
      working-directory: ./benchmark-phobos
      run: |
        hyperfine \
          --warmup 1 \
          --runs 5 \
          --show-output \
          --export-json benchmark_results.json \
          --prepare 'rm -f *.o' \
          "../pr-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d" \
          "../master-dmd/generated/linux/release/$MODEL/dmd -i=std -c -unittest -version=StdUnittest -preview=dip1000 std/package.d"

    - name: Parse results
      id: results
      run: |
        # Initial error checking
        if [ ! -f benchmark-phobos/benchmark_results.json ]; then
          echo "::error::Benchmark results file not found!"
          exit 1
        fi

        # Validate JSON structure
        if ! jq -e '.results | length >= 2' benchmark-phobos/benchmark_results.json >/dev/null; then
          echo "::error::Invalid benchmark results format"
          exit 1
        fi

        # Extract raw data with error handling
        pr_times=($(jq -r '.results[0].times[]? | select(. != null and . > 0) | tonumber' benchmark-phobos/benchmark_results.json || echo "0"))
        pr_mem=($(jq -r '.results[0].max_rss[]? | select(. != null and . > 0) | tonumber' benchmark-phobos/benchmark_results.json || echo "0"))
        master_times=($(jq -r '.results[1].times[]? | select(. != null and . > 0) | tonumber' benchmark-phobos/benchmark_results.json || echo "0"))
        master_mem=($(jq -r '.results[1].max_rss[]? | select(. != null and . > 0) | tonumber' benchmark-phobos/benchmark_results.json || echo "0"))

        # Safety check for empty data
        if [ ${#pr_times[@]} -eq 0 ] || [ ${#master_times[@]} -eq 0 ]; then
          echo "::error::Missing time measurements in benchmark results"
          exit 1
        fi

        # Format individual runs safely
        format_runs() {
          local arr=("$@")
          if [ ${#arr[@]} -eq 0 ]; then
            echo "N/A"
          else
            printf "%.3f, " "${arr[@]}" | sed 's/, $//'
          fi
        }

        format_mem_runs() {
          local arr=("$@")
          if [ ${#arr[@]} -eq 0 ]; then
            echo "N/A"
          else
            for m in "${arr[@]}"; do
              if [ "$m" != "0" ]; then
                printf "%.1f MB, " "$(echo "$m/1024" | bc -l)"
              else
                printf "N/A, "
              fi
            done | sed 's/, $//'
          fi
        }

        pr_time_runs=$(format_runs "${pr_times[@]}")
        master_time_runs=$(format_runs "${master_times[@]}")

        # Handle memory runs with protection against empty arrays
        if [ ${#pr_mem[@]} -gt 0 ]; then
          pr_mem_runs=$(format_mem_runs "${pr_mem[@]}")
        else
          pr_mem_runs="N/A"
        fi

        if [ ${#master_mem[@]} -gt 0 ]; then
          master_mem_runs=$(format_mem_runs "${master_mem[@]}")
        else
          master_mem_runs="N/A"
        fi

        # Get stats from hyperfine results with safety checks
        safe_get_value() {
          local path="$1"
          local default="$2"
          local value=$(jq -r "$path // \"$default\"" benchmark-phobos/benchmark_results.json)
          if [[ "$value" == "null" || -z "$value" ]]; then
            echo "$default"
          else
            echo "$value"
          fi
        }

        pr_time_avg=$(safe_get_value '.results[0].mean' '0')
        pr_time_stddev=$(safe_get_value '.results[0].stddev' '0')
        master_time_avg=$(safe_get_value '.results[1].mean' '0')
        master_time_stddev=$(safe_get_value '.results[1].stddev' '0')

        # Format time values
        pr_time_avg_fmt=$(awk -v val="$pr_time_avg" 'BEGIN {printf "%.3f", val}')
        pr_time_stddev_fmt=$(awk -v val="$pr_time_stddev" 'BEGIN {printf "%.3f", val}')
        master_time_avg_fmt=$(awk -v val="$master_time_avg" 'BEGIN {printf "%.3f", val}')
        master_time_stddev_fmt=$(awk -v val="$master_time_stddev" 'BEGIN {printf "%.3f", val}')

        # Calculate memory stats with division by zero protection
        calc_avg() {
          local arr=("$@")
          if [ ${#arr[@]} -eq 0 ] || [ "${arr[0]}" == "0" ]; then
            echo "0"
          else
            echo "${arr[@]}" | tr ' ' '\n' | awk '{sum += $1} END {if (NR > 0) printf "%.1f", sum/NR/1024; else print "0"}'
          fi
        }

        pr_mem_avg=$(calc_avg "${pr_mem[@]}")
        master_mem_avg=$(calc_avg "${master_mem[@]}")

        # Calculate differences with division by zero protection
        time_diff=$(awk -v pt="$pr_time_avg" -v mt="$master_time_avg" 'BEGIN {printf "%.3f", pt - mt}')
        mem_diff=$(awk -v pm="$pr_mem_avg" -v mm="$master_mem_avg" 'BEGIN {printf "%+.1f", pm - mm}')

        # Calculate percentages with division by zero protection
        safe_percent() {
          local value="$1"
          local base="$2"
          awk -v val="$value" -v base="$base" 'BEGIN {
            if (base + 0 == 0 || base == "NaN") {
              print "N/A"
            } else {
              printf "%+.2f%%", ((val/base)-1)*100
            }
          }'
        }

        time_pct=$(safe_percent "$pr_time_avg" "$master_time_avg")
        mem_pct=$(safe_percent "$pr_mem_avg" "$master_mem_avg")

        # Calculate statistical significance (normalized by standard deviation)
        calc_significance() {
          local diff="$1"
          local sd1="$2"
          local sd2="$3"
          awk -v d="$diff" -v s1="$sd1" -v s2="$sd2" 'BEGIN {
            pooled_var = (s1*s1 + s2*s2)
            if (pooled_var <= 0) {
              print "N/A"
            } else {
              printf "%.2f", d / sqrt(pooled_var)
            }
          }'
        }

        time_sig=$(calc_significance "$time_diff" "$pr_time_stddev" "$master_time_stddev")

        # Set outputs
        echo "pr_time_runs=${pr_time_runs}" >> $GITHUB_OUTPUT
        echo "pr_mem_runs=${pr_mem_runs}" >> $GITHUB_OUTPUT
        echo "master_time_runs=${master_time_runs}" >> $GITHUB_OUTPUT
        echo "master_mem_runs=${master_mem_runs}" >> $GITHUB_OUTPUT
        echo "pr_time_avg=${pr_time_avg_fmt} ± ${pr_time_stddev_fmt}" >> $GITHUB_OUTPUT
        echo "master_time_avg=${master_time_avg_fmt} ± ${master_time_stddev_fmt}" >> $GITHUB_OUTPUT
        echo "pr_mem_avg=${pr_mem_avg}" >> $GITHUB_OUTPUT
        echo "master_mem_avg=${master_mem_avg}" >> $GITHUB_OUTPUT
        echo "time_diff=${time_diff}" >> $GITHUB_OUTPUT
        echo "time_pct=${time_pct}" >> $GITHUB_OUTPUT
        echo "mem_diff=${mem_diff}" >> $GITHUB_OUTPUT
        echo "mem_pct=${mem_pct}" >> $GITHUB_OUTPUT
        echo "time_sig=${time_sig}" >> $GITHUB_OUTPUT
        echo "binary_diff=${{ steps.diff_check.outputs.DIFF_RESULT }}" >> $GITHUB_OUTPUT

    - name: Create comment
      run: |
        # Function to handle potential "N/A" values in formatting
        format_or_na() {
          local value="$1"
          local format="$2"
          if [[ "$value" == "N/A" ]]; then
            echo "N/A"
          else
            printf "$format" "$value"
          fi
        }

        # Get significance icon
        get_sig_icon() {
          local sig="$1"
          if [[ "$sig" == "N/A" ]]; then
            echo "❓"
          elif (( $(echo "$sig < -2" | bc -l) )); then
            echo "🟢"
          elif (( $(echo "$sig > 2" | bc -l) )); then
            echo "🔴"
          else
            echo "⚪"
          fi
        }

        # Get change icon
        get_change_icon() {
          local pct="$1"
          if [[ "$pct" == "N/A" ]]; then
            echo "⚠️"
          elif [[ "$pct" == *"-"* ]]; then
            echo "✅"
          elif [[ "$pct" == *"+"* ]]; then
            echo "⚠️"
          else
            echo "➖"
          fi
        }

        time_sig_icon=$(get_sig_icon "${{ steps.results.outputs.time_sig }}")
        time_change_icon=$(get_change_icon "${{ steps.results.outputs.time_pct }}")

        # Process diff details safely
        diff_details=""
        if [[ -n "${{ steps.diff_check.outputs.DIFF_DETAILS }}" ]]; then
          diff_details=$'\n<details>\n<summary>🔍 Binary Diff Details</summary>\n\n'
          diff_details+="${{ steps.diff_check.outputs.DIFF_DETAILS }}"
          diff_details+=$'\n</details>'
        fi

        # Generate individual runs table rows in a separate command substitution
        individual_runs=$(
          IFS=', ' read -ra pr_times <<< "${{ steps.results.outputs.pr_time_runs }}"
          IFS=', ' read -ra master_times <<< "${{ steps.results.outputs.master_time_runs }}"
          IFS=', ' read -ra pr_mems <<< "${{ steps.results.outputs.pr_mem_runs }}"
          IFS=', ' read -ra master_mems <<< "${{ steps.results.outputs.master_mem_runs }}"
          for i in {0..4}; do
            printf "| %d | %s | %s | %s | %s |\n" $((i+1)) "${pr_times[$i]:-N/A}" "${master_times[$i]:-N/A}" "${pr_mems[$i]:-N/A}" "${master_mems[$i]:-N/A}"
          done
        )

        PERFORMANCE_COMMENT=$(cat << EOF | sed 's/^        //g'
        ### 🚀 Performance Benchmark Results

        **Individual Runs:**
        | Run | PR Time (s) | Master Time (s) | PR Memory (MB) | Master Memory (MB) |
        |-----|-------------|-----------------|----------------|---------------------|
        ${individual_runs}

        **Summary Statistics:**
        | Metric          | PR                    | Master                 | Difference       | Change          | Significance  |
        |-----------------|-----------------------|------------------------|------------------|----------------|--------------|
        | ⏱️ Time (s)     | ${{ steps.results.outputs.pr_time_avg }} | ${{ steps.results.outputs.master_time_avg }} | ${{ steps.results.outputs.time_diff }} | ${{ steps.results.outputs.time_pct }} $time_change_icon | $time_sig_icon ${{ steps.results.outputs.time_sig }}σ |
        | 🧠 Memory (MB)  | ${{ steps.results.outputs.pr_mem_avg }}      | ${{ steps.results.outputs.master_mem_avg }}      | ${{ steps.results.outputs.mem_diff }}  | ${{ steps.results.outputs.mem_pct }}  | - |

        **Binary Comparison:**
        ${{ steps.results.outputs.binary_diff }}
        ${diff_details}

        <details>
        <summary>📊 Additional Details</summary>
        - **Benchmark target**: Phobos@${{ env.BENCHMARK_REF }}
        - **Runs**: 5 measurements after 1 warmup
        - **Environment**: Ubuntu Latest (GitHub Actions)
        - **Hyperfine version**: \`$(hyperfine --version)\`
        EOF
        )

        # Evaluate variables after heredoc processing
        PERFORMANCE_COMMENT=$(eval "echo \"$PERFORMANCE_COMMENT\"")
        echo "$PERFORMANCE_COMMENT" > performance_comment.md

    - name: Post comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const comment = fs.readFileSync('performance_comment.md', 'utf8');
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const existingComment = comments.find(c => c.body.includes('🚀 Performance Benchmark Results'));

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }
